name: Build, Release, and Publish

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 1'  # Every Monday at midnight

jobs:
  build_and_release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Get Electron & Repo Release Tags
      - name: Get latest Electron and repo release tags
        id: get_release_info
        run: |
          electron_release_info=$(curl -s https://api.github.com/repos/electron/electron/releases/latest)
          electron_tag=$(echo "$electron_release_info" | jq -r .tag_name | sed 's/^v//')
          echo "Electron release tag: $electron_tag"

          repo_release_info=$(curl -s https://api.github.com/repos/AscendXP/gfn-electron-xp/releases/latest)
          repo_tag=$(echo "$repo_release_info" | jq -r .tag_name | sed 's/^v//')
          echo "Repo release tag: $repo_tag"

          if [ -z "$electron_tag" ] || [ -z "$repo_tag" ]; then
            echo "Failed to fetch release tags. Exiting."
            exit 1
          fi

          echo "ELECTRON_TAG=$electron_tag" >> $GITHUB_ENV
          echo "REPO_TAG=$repo_tag" >> $GITHUB_ENV

      # Step 5: Compare release versions
      - name: Compare release versions
        run: |
          echo "Comparing Electron release: ${{ env.ELECTRON_TAG }} with Repo release: ${{ env.REPO_TAG }}"
          if [ "${{ env.ELECTRON_TAG }}" == "${{ env.REPO_TAG }}" ]; then
            echo "No new Electron release. Skipping build."
            exit 0
          fi

      # Step 6: Set dynamic release name and release notes
      - name: Set dynamic release name and release notes
        run: |
          release_name="GFN electron [Auto build Latest Electron: v${{ env.ELECTRON_TAG }}]"
          echo "RELEASE_NAME=$release_name" >> $GITHUB_ENV

          {
            echo "⚠️ **Note**"
            echo "This version was built automatically using the latest Electron release."
            echo "Future updates of Electron may introduce breaking changes."
            echo ""
            echo "**Changelog:**"
            echo "- ✅ Hardware Acceleration enabled by default"
            echo "- 🛠️ Discord RPC fix"
            echo "- 🧪 arm64 builds (untested)"
            echo "- ♻️ Auto-builds to latest Electron version"
            echo "- 🧊 Forked from hmlendea/gfn-electron"
            echo "- 🧱 Includes prebuilt Auto-Update AppImages (x86_64 & arm64)"
          } > release_notes.txt

      # Step 6.5: Inject Electron version into artifact name
      - name: Inject Electron version into artifact name
        run: node scripts/prebuild.js

      # Step 7: Build the Electron app
      - name: Build the Electron app
        run: |
          npx electron-builder --linux "AppImage" "zip" --arm64 --x64 --publish never

      # Step 7.5: Download prebuilt AppImages and move to dist
      - name: Download prebuilt AppImages from repo
        run: |
          mkdir -p dist

          curl -L -o "dist/GeForce_NOW_(Auto-Update)-x86_64.AppImage" \
            "https://raw.githubusercontent.com/AscendXP/gfn-electron-xp/main/GFN-Auto-Update-x86_64/GeForce_NOW_Auto-Update_-x86_64.AppImage"

          curl -L -o "dist/GeForce_NOW_(Auto-Update)-arm64.AppImage" \
            "https://raw.githubusercontent.com/AscendXP/gfn-electron-xp/main/GFN-Auto-Update-arm64/GeForce_NOW_Auto-Update_-arm64.AppImage"

      # Step 8: Create or Update GitHub Release
      - name: Create or Update GitHub Release
        run: |
          sudo apt install -y gh
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

          tag="v${{ env.ELECTRON_TAG }}"

          if gh release view "$tag" &>/dev/null; then
            echo "Release exists, updating..."
            gh release edit "$tag" \
              --title "${{ env.RELEASE_NAME }}" \
              --notes-file release_notes.txt

            gh release upload "$tag" dist/*.AppImage dist/*.zip --clobber
          else
            echo "Creating new release..."
            gh release create "$tag" \
              --title "${{ env.RELEASE_NAME }}" \
              --notes-file release_notes.txt

            gh release upload "$tag" dist/*.AppImage dist/*.zip
          fi
